name: Windows CI (MSYS2 / clang)

on:
  push:
    branches: [ "main" ]
  pull_request:
  workflow_dispatch:

concurrency:
  group: windows-ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug, Release]

    env:
      BUILD_DIR: ${{ github.workspace }}\build
      CMAKE_GENERATOR: Ninja
      CCACHE_DIR: ${{ github.workspace }}\.ccache
      CMAKE_BUILD_PARALLEL_LEVEL: 4
      GTEST_COLOR: 1

    steps:
      - uses: actions/checkout@v4

      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            base-devel
            git
            zip
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-clang
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-ccache
            mingw-w64-x86_64-expat
            mingw-w64-x86_64-gtest
            mingw-w64-x86_64-wxwidgets3.2-msw
            mingw-w64-x86_64-libtiff
            mingw-w64-x86_64-cppcheck
            mingw-w64-x86_64-nsis

      - name: Toolchain info
        shell: msys2 {0}
        run: |
          export PATH="/mingw64/bin:$PATH"
          clang++ --version
          wx-config --version

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-win-clang-${{ matrix.build_type }}-${{ github.sha }}
          restore-keys: |
            ccache-win-clang-${{ matrix.build_type }}-
            ccache-win-clang-

      - name: Configure (CMake)
        shell: msys2 {0}
        run: |
          export PATH="/mingw64/bin:$PATH"
          cmake -B "$BUILD_DIR" -S "$GITHUB_WORKSPACE" \
                -G "$CMAKE_GENERATOR" \
                -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                -DCMAKE_C_COMPILER="$(cygpath -m /mingw64/bin/clang.exe)" \
                -DCMAKE_CXX_COMPILER="$(cygpath -m /mingw64/bin/clang++.exe)" \
                -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
                -DCMAKE_PREFIX_PATH=/mingw64 \
                -DwxWidgets_CONFIG_EXECUTABLE=/mingw64/bin/wx-config \
                -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

      - name: Build
        shell: msys2 {0}
        run: |
          export PATH="/mingw64/bin:$PATH"
          cmake --build "$BUILD_DIR" --config ${{ matrix.build_type }}

      - name: Run tests
        shell: msys2 {0}
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          export PATH="/mingw64/bin:$PATH"
          ctest -j"$(nproc)" --build-config ${{ matrix.build_type }} --output-on-failure

      - name: Install (staging)
        if: matrix.build_type == 'Release'
        shell: msys2 {0}
        run: cmake --install "$BUILD_DIR" --config Release --prefix "$BUILD_DIR/_staging"

      - name: Package (CPack NSIS)
        if: matrix.build_type == 'Release' && github.ref == 'refs/heads/main'
        shell: msys2 {0}
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          set -e
          export PATH="/mingw64/bin:$PATH"
          if [ ! -f CPackConfig.cmake ]; then
            echo "CPackConfig.cmake missing. Did you include(CPack) in CMakeLists.txt?"
            ls -1 .
            exit 1
          fi
          echo "Running CPack..."
          cpack -G NSIS -C Release --config CPackConfig.cmake -VV
          echo "Produced files:"
          find . -maxdepth 4 -name '*.exe' -o -name '*.msi'

      - name: Upload tests artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.build_type }}-tests
          path: |
            ${{ env.BUILD_DIR }}\Testing\Temporary\LastTest.log
            ${{ env.BUILD_DIR }}\tests\bin\LogViewer_tests.exe
          if-no-files-found: ignore

      - name: Upload staging artifact
        if: matrix.build_type == 'Release' && always()
        uses: actions/upload-artifact@v4
        with:
            name: windows-Release-staging
            path: ${{ env.BUILD_DIR }}\_staging\**
            if-no-files-found: ignore

      - name: Upload installer artifact
        if: matrix.build_type == 'Release' && github.ref == 'refs/heads/main' && always()
        uses: actions/upload-artifact@v4
        with:
          name: windows-Release-installer
          path: ${{ env.BUILD_DIR }}\_CPack_Packages\win64\NSIS\*.exe
          if-no-files-found: error
