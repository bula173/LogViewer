name: Linux CI (GCC/Clang)

on:
  push:
    branches: [ "main" ]
  pull_request:
  workflow_dispatch:

concurrency:
  group: linux-ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug, Release]
        compiler: [gcc, clang]

    env:
      BUILD_DIR: ${{ github.workspace }}/build
      CMAKE_GENERATOR: Ninja
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CMAKE_BUILD_PARALLEL_LEVEL: 4
      GTEST_COLOR: 1

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ninja-build ccache build-essential \
            libgtk-3-dev libwxgtk3.2-dev libexpat1-dev \
            libgtest-dev cppcheck xvfb
          (cd /usr/src/googletest && sudo cmake -B build -S . && sudo cmake --build build --target gtest gtest_main && sudo cp build/lib/libgtest*.a /usr/lib/)

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-linux-${{ matrix.compiler }}-${{ matrix.build_type }}-${{ github.sha }}
          restore-keys: |
            ccache-linux-${{ matrix.compiler }}-${{ matrix.build_type }}-
            ccache-linux-${{ matrix.compiler }}-
            ccache-linux-

      - name: Configure
        run: |
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            export CC=gcc CXX=g++
          else
            sudo apt-get install -y clang
            export CC=clang CXX=clang++
          fi
          cmake -B "$BUILD_DIR" -S "$GITHUB_WORKSPACE" \
            -G "$CMAKE_GENERATOR" \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

      - name: Build
        run: cmake --build "$BUILD_DIR" --config ${{ matrix.build_type }}

      - name: Static analysis (cppcheck)
        if: matrix.build_type == 'Debug'
        run: |
          cppcheck --enable=warning,performance,portability \
                   --inline-suppr --error-exitcode=1 \
                   -I src -I include \
                   src 2> cppcheck-report.txt || (cat cppcheck-report.txt; exit 1)
          cat cppcheck-report.txt

      - name: List tests
        working-directory: ${{ env.BUILD_DIR }}
        run: ctest -N || true

      - name: Run tests (xvfb)
        working-directory: ${{ env.BUILD_DIR }}
        run: xvfb-run -a ctest -j"$(nproc)" --build-config ${{ matrix.build_type }} --output-on-failure

      - name: Install (staging)
        if: matrix.build_type == 'Release'
        run: cmake --install "$BUILD_DIR" --config Release --prefix "$BUILD_DIR/_staging"

      - name: Package (CPack TGZ)
        if: matrix.build_type == 'Release' && github.ref == 'refs/heads/main'
        working-directory: ${{ env.BUILD_DIR }}
        run: cpack -G TGZ -C Release --config CPackConfig.cmake

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.compiler }}-${{ matrix.build_type }}-artifacts
          path: |
            ${{ env.BUILD_DIR }}/_staging/**
            ${{ env.BUILD_DIR }}/_CPack_Packages/Linux/TGZ/*.tar.gz
            ${{ env.BUILD_DIR }}/Testing/Temporary/LastTest.log
          if-no-files-found: ignore
